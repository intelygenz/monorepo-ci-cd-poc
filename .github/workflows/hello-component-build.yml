name: Hello Component Build

on:
  push:
    branches-ignore:
      - "v*"
    tags-ignore:
      - "**"
    paths:
      - "hello-world/**/*"
      - ".github/hello-quality*"


env:
  GITHUB_TOKEN: ${{ secrets.PATNAME }}


jobs:

  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: CheckOut
        uses: actions/checkout@v2

  quality-checks:
    needs: checkout
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Python environment
        uses: actions/setup-python@v1
        with:
          python-version: "2.7"

      - name: flake8 Lint
        uses: py-actions/flake8@v1

  tag-release-version:
    if: github.ref == 'refs/heads/main' # only in main branch
    needs: quality-checks
    runs-on: ubuntu-20.04
    outputs:
      tag: ${{ steps.release_tag.outputs.tag }}
    steps:
      - name: CheckOut
        uses: actions/checkout@v2

      - name: Generate a release tag
        uses: ./.github/actions
        id: release_tag
        with:
          prefix: "hello-"
          mode: 'component-release'
          default-branch: 'main'

  tag-fix-version:
    if: startsWith(github.ref, 'refs/heads/release') # only in release branches
    needs: quality-checks
    runs-on: ubuntu-20.04
    outputs:
       tag: ${{ steps.fix_tag.outputs.tag }}
    steps:
      - name: CheckOut
        uses: actions/checkout@v2

      - uses: chrisdickinson/setup-yq@latest
      - name: Get component versions
        id: compoment_version
        run: |
          TAG=`yq r metaapp/values.yaml 'helloWorld.tag'`
          echo ::set-output name=TAG::${TAG}
          echo Component version in release branch is ${TAG}

      - name: Generate a fix
        uses: ./.github/actions
        id: fix_tag
        with:
          prefix: "hello-"
          current-version: ${{ steps.compoment_version.outputs.TAG }}
          mode: 'component-fix'

  build-release:
    if: |
      ${{needs.tag-release-version.outputs.tag}} != '' ||
      ${{needs.tag-fix-version.outputs.tag}} != ''
    needs: [tag-release-version, tag-fix-version]
    runs-on: ubuntu-latest
    steps:
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v1

      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v1

      #- name: Login to DockerHub Registry
      #  uses: docker/login-action@v1
      #  with:
      #    username: ${{ secrets.DOCKERHUB_USERNAME }}
      #    password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Store fix tag
        run: echo Tag set to ${{needs.tag-release-version.outputs.tag}}${{needs.tag-fix-version.outputs.tag}}

      #- name: Push to Docker Hub
      #  uses: docker/build-push-action@v2
      #  with:
      #    context: ./hello-world
      #    file: ./hello-world/Dockerfile
      #    platforms: linux/amd64
      #    push: true
      #    tags: |
      #      konstellation/hello-world:${{ steps.version.outputs.tag }}
      #      konstellation/hello-world:latest
